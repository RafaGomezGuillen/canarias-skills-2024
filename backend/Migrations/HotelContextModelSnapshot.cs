// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(HotelContext))]
    partial class HotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("backend.Models.Comensal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdMesa")
                        .HasColumnType("int");

                    b.Property<int?>("MesaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MesaId");

                    b.ToTable("Comensales");
                });

            modelBuilder.Entity("backend.Models.Mesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<int>("IdSala")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMesa")
                        .HasColumnType("int");

                    b.Property<int?>("SalaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaId");

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacidad = 10,
                            IdSala = 1,
                            NumeroMesa = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacidad = 5,
                            IdSala = 1,
                            NumeroMesa = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacidad = 20,
                            IdSala = 1,
                            NumeroMesa = 3
                        },
                        new
                        {
                            Id = 4,
                            Capacidad = 2,
                            IdSala = 2,
                            NumeroMesa = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacidad = 22,
                            IdSala = 3,
                            NumeroMesa = 1
                        },
                        new
                        {
                            Id = 6,
                            Capacidad = 11,
                            IdSala = 4,
                            NumeroMesa = 1
                        },
                        new
                        {
                            Id = 7,
                            Capacidad = 22,
                            IdSala = 5,
                            NumeroMesa = 1
                        },
                        new
                        {
                            Id = 8,
                            Capacidad = 23,
                            IdSala = 6,
                            NumeroMesa = 1
                        },
                        new
                        {
                            Id = 9,
                            Capacidad = 20,
                            IdSala = 6,
                            NumeroMesa = 2
                        });
                });

            modelBuilder.Entity("backend.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSala")
                        .HasColumnType("int");

                    b.Property<int>("Invitados")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalaId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("backend.Models.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AforoMax")
                        .HasColumnType("int");

                    b.Property<int>("AforoMin")
                        .HasColumnType("int");

                    b.Property<bool>("EstaReservada")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RouteLocalhost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Salas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AforoMax = 102,
                            AforoMin = 70,
                            EstaReservada = false,
                            Nombre = "Carpa Jilorio",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala1/foto.jpg"
                        },
                        new
                        {
                            Id = 2,
                            AforoMax = 62,
                            AforoMin = 50,
                            EstaReservada = false,
                            Nombre = "Salón Sancoch",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala2/foto.jpg"
                        },
                        new
                        {
                            Id = 3,
                            AforoMax = 56,
                            AforoMin = 40,
                            EstaReservada = false,
                            Nombre = "Terraza Solajero",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala3/foto.jpg"
                        },
                        new
                        {
                            Id = 4,
                            AforoMax = 64,
                            AforoMin = 46,
                            EstaReservada = false,
                            Nombre = "Pabellón Chascar",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala4/foto.jpg"
                        },
                        new
                        {
                            Id = 5,
                            AforoMax = 116,
                            AforoMin = 80,
                            EstaReservada = false,
                            Nombre = "Jardín Abollao",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala5/foto.jpg"
                        },
                        new
                        {
                            Id = 6,
                            AforoMax = 260,
                            AforoMin = 140,
                            EstaReservada = false,
                            Nombre = "Recinto Belingo",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala6/foto.jpg"
                        },
                        new
                        {
                            Id = 7,
                            AforoMax = 54,
                            AforoMin = 38,
                            EstaReservada = false,
                            Nombre = "Sala Empalicar",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala7/foto.jpg"
                        },
                        new
                        {
                            Id = 8,
                            AforoMax = 144,
                            AforoMin = 100,
                            EstaReservada = false,
                            Nombre = "Zagúan Enyugar",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala8/foto.jpg"
                        },
                        new
                        {
                            Id = 9,
                            AforoMax = 200,
                            AforoMin = 200,
                            EstaReservada = false,
                            Nombre = "Palacio Canchanchán",
                            Route = "",
                            RouteLocalhost = "https://localhost:7060/Uploads/sala9/foto.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e82a0115-103c-4af6-bcfd-74802399eb29",
                            ConcurrencyStamp = "0c11e084-1989-4fb4-9d84-6708421a0013",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "6056b9a7-a995-4bb6-9fd6-d4c4cf4ed083",
                            ConcurrencyStamp = "df0d7589-8a96-4e00-8b1a-06efadadf444",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "692c0638-51b4-4571-95bb-2208954a8e60",
                            RoleId = "e82a0115-103c-4af6-bcfd-74802399eb29"
                        },
                        new
                        {
                            UserId = "82a140a3-0650-49f2-b8bc-44ee82fcdc52",
                            RoleId = "6056b9a7-a995-4bb6-9fd6-d4c4cf4ed083"
                        },
                        new
                        {
                            UserId = "0ce7907e-f1a2-4889-88ce-067f55636186",
                            RoleId = "6056b9a7-a995-4bb6-9fd6-d4c4cf4ed083"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "692c0638-51b4-4571-95bb-2208954a8e60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d944fb9-c714-48a4-8648-683d7898c271",
                            Email = "user1@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEDC2KVaL6LdJQoAIPzh7NPi5Rf8aJ5HHb4vBo27NiiHTiB1bs1EBswCb+h2cqU9fqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12ef3207-dd4b-4cb0-b564-5ef23f250505",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "82a140a3-0650-49f2-b8bc-44ee82fcdc52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36ee61d9-db1e-40a5-9a4d-73ea82d82c6c",
                            Email = "user2@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEHI706tS3tyYYMt4AxVBaYDSo7PAK9nRDf1rCdkADCRwNb17DeUOEKCkswyOBzZ2+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4aec1318-08dc-40ea-b065-efd18530b67b",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "0ce7907e-f1a2-4889-88ce-067f55636186",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67f6d527-2665-47b2-8b39-81ec71ccf559",
                            Email = "user3@email.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EMAIL.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAEIO9q8QCN1lqM1os/UyARhtWTLgvYyDJSUICQ72BFLgXYPPYTSGdt3M240wYBhTi7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7ba2865c-ba45-45cd-a6e0-849e85d2c701",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        });
                });

            modelBuilder.Entity("backend.Models.Comensal", b =>
                {
                    b.HasOne("backend.Models.Mesa", "Mesa")
                        .WithMany("Comensales")
                        .HasForeignKey("MesaId");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("backend.Models.Mesa", b =>
                {
                    b.HasOne("backend.Models.Sala", "Sala")
                        .WithMany("Mesas")
                        .HasForeignKey("SalaId");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("backend.Models.Reserva", b =>
                {
                    b.HasOne("backend.Models.Sala", "Sala")
                        .WithMany("Reserva")
                        .HasForeignKey("SalaId");

                    b.HasOne("User", null)
                        .WithMany("Reservas")
                        .HasForeignKey("UserId");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Mesa", b =>
                {
                    b.Navigation("Comensales");
                });

            modelBuilder.Entity("backend.Models.Sala", b =>
                {
                    b.Navigation("Mesas");

                    b.Navigation("Reserva");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
