{
	"info": {
		"_postman_id": "4afee328-a34a-4eef-97c4-93c15271de8d",
		"name": "Hotel Reservas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30254627"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200', function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"})\r",
									"\r",
									"pm.test('Validate the access token is present in the response', function () {\r",
									"    const responseData = JSON.parse(pm.response.text());\r",
									"    pm.expect(responseData.token).to.include('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', 'Access token is not present');\r",
									"})\r",
									"\r",
									"pm.test('Validate the access token is a non-empty string', function () {\r",
									"    const responseData = JSON.parse(pm.response.text());\r",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Access token should not be empty');\r",
									"})\r",
									"\r",
									"pm.test('The access token is a valid JWT format', function () {\r",
									"    const responseData = JSON.parse(pm.response.text());\r",
									"    pm.expect(responseData.token).to.match(/^[\\w-]+\\.[\\w-]+\\.[\\w-]+$/);\r",
									"})\r",
									"\r",
									"pm.test(\"Verify that the access token contains the expected claims\", function () {\r",
									"    const responseData = JSON.parse(pm.response.text());\r",
									"    const token = responseData.token.split('.')[1];\r",
									"    const payload = JSON.parse(atob(token));\r",
									"  \r",
									"    pm.expect(payload).to.have.property(\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\");\r",
									"    pm.expect(payload).to.have.property(\"jti\");\r",
									"    pm.expect(payload).to.have.property(\"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\");\r",
									"    pm.expect(payload).to.have.property(\"exp\");\r",
									"    pm.expect(payload).to.have.property(\"iss\");\r",
									"    pm.expect(payload).to.have.property(\"aud\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that sub field contains the username of the user who request the token\", function () {\r",
									"    const responseData = JSON.parse(pm.response.text());\r",
									"    const token = responseData.token.split('.')[1];\r",
									"    const payload = JSON.parse(atob(token));\r",
									"    const name = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\r",
									"\r",
									"    pm.expect(payload[name]).to.equal(pm.collectionVariables.get(\"userNameTest\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that new user has role User or Admin in token claims\", function () {\r",
									"    const responseData = JSON.parse(pm.response.text());\r",
									"    const token = responseData.token.split('.')[1];\r",
									"    const payload = JSON.parse(atob(token));\r",
									"    const role = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\";\r",
									"\r",
									"    pm.expect(payload[role]).to.equal(\"User\") || pm.expect(payload[role]).to.equal(\"Admin\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"bearer-token\", JSON.parse(pm.response.text()).token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{userNameTest}}\",\r\n  \"password\": \"{{userPassTest}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Auth/login",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"userEmailTest\", pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"pm.collectionVariables.set(\"userNameTest\", pm.variables.replaceIn('{{$randomUserName}}'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userEmailTest}}\",\r\n    \"username\" : \"{{userNameTest}}\",\r\n    \"password\" : \"{{userPassTest}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Auth/register",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reservas",
			"item": [
				{
					"name": "Get Reservas",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Reserva",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Reserva"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reserva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('nombre');\r",
									"    pm.expect(responseData).to.have.property('invitados');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('username');\r",
									"    pm.expect(responseData).to.have.property('idSala');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Sala object should exist and be an object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.sala).to.exist.and.to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"AforoMax and aforoMin are non-negative integers\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.aforoMax).to.be.a('number').and.to.be.at.least(0);\r",
									"  pm.expect(responseData.aforoMin).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Reserva property should be null\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.reserva).to.equal(null);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Reserva/:ReservaId",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Reserva",
								":ReservaId"
							],
							"variable": [
								{
									"key": "ReservaId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Reserva",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Nombre mio\",\r\n  \"invitados\": 102,\r\n  \"date\": \"2024-02-28\",\r\n  \"username\": \"user1\",\r\n  \"idSala\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Reserva/",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Reserva",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Reserva",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Reserva num 2\",\r\n  \"invitados\": 222,\r\n  \"date\": \"2024-02-28\",\r\n  \"username\": \"user1\",\r\n  \"idSala\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Reserva/:Id",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Reserva",
								":Id"
							],
							"variable": [
								{
									"key": "Id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Reserva",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Reserva/:Id",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Reserva",
								":Id"
							],
							"variable": [
								{
									"key": "Id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Salas",
			"item": [
				{
					"name": "Get Salas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Array has at least one element\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(sala) {\r",
									"        pm.expect(sala.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"Id should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nombre should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(sala) {\r",
									"        pm.expect(sala.nombre).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nombre should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Reserva is an empty array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(sala) {\r",
									"        pm.expect(sala.reserva).to.be.an('array').that.is.empty;\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Sala",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Sala"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sala",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id, nombre, aforoMax, aforoMin, and estaReservada fields are present\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist;\r",
									"    pm.expect(responseData.nombre).to.exist;\r",
									"    pm.expect(responseData.aforoMax).to.exist;\r",
									"    pm.expect(responseData.aforoMin).to.exist;\r",
									"    pm.expect(responseData.estaReservada).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"RouteLocalhost fields are present and not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.routeLocalhost).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Reserva array is present and contains expected number of elements\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.reserva).to.be.an('array');\r",
									"    pm.expect(responseData.reserva.length).to.equal(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Sala/:SalaId",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Sala",
								":SalaId"
							],
							"variable": [
								{
									"key": "SalaId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get Users",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/User",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/User/:username",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"User",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "user2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mesa",
			"item": [
				{
					"name": "Get Mesas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Mesa",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Mesa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Mesa",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Mesa/:id",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Mesa",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comensal",
			"item": [
				{
					"name": "Upload comensal",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Rafa Gomez\",\r\n  \"idMesa\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{Host}}:{{Port}}/api/Comensal/",
							"protocol": "https",
							"host": [
								"{{Host}}"
							],
							"port": "{{Port}}",
							"path": [
								"api",
								"Comensal",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearer-token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Port",
			"value": "7060",
			"type": "string"
		},
		{
			"key": "Host",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "bearer-token",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmailTest",
			"value": "user3@email.com",
			"type": "string"
		},
		{
			"key": "userPassTest",
			"value": "Asdf1234!",
			"type": "string"
		},
		{
			"key": "userNameTest",
			"value": "user3",
			"type": "string"
		}
	]
}